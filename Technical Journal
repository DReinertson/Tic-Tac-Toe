As I did not start this when I was currently working on the project, I'm going to take some time to reflect on the struggles I faced and how those were overcome.

7/18/18 : What I learned
  - Before this, I was struggling with how to position things the way I wanted to. How to put the main container in the center of the page and then position things within that container. This was the first project I learned how to use css flex-box effectively.
      o I Looked up how to use flexbox through <https://css-tricks.com/snippets/css/a-guide-to-flexbox/> and was able to get things the way i wanted.
  - Next, I wasn't sure the best way to put an X and O in each square. Should I position a letter and mess with font-size in terms of container size? Should I just input an image that is the same dimensions as the box any time the button is pressed? 
      o I figured that inputting an image would potentially be easier and a more perfect fit, but thought that it would require more memory and ultimately be less efficient. I decided to just use "X" and "O" and use font-size. These variables were set when the player was told to select a letter. 
  - Lastly, the part I struggled the most on was how to detect whether or not 3 letters were in a row/column/diagonal. 
      o My initial thought was to treat the 3x3 box as a grid system with coordinates, center square being (0,0). Then using a for loop, go through each square and detect whether or not coordinates were occupied by the same letter. As I was writing for that, It became a mess of If/else statments (If container has "X", store coordinates, check next square if next doesn't, cont...etc) and I thought that overall it just seemed cluttered and there could be an easier way. 
      o Next I thought I could almost map out every possibility of winning and compare it to each outcome. Again, this seemed like it was going to lead to too much clutter, mess and ultimately inefficiency. 
      o My last option was to make a point(value) based system per coordinate(key). If someone chose the top left square for instance, they would get one point in the "left-column", "top-row", and "left-diagonal" key. It will then check to see if any key:value pair has a 3 3 as the value ("top-row" : 3) and would execute win condition from there. 
  -This was the first test of trying different things out, elaborating if it could be better, and executing that change if there is something better. If I were to continue to work on this project for the camp (I finished it going above the cirriculum) I would make the computer not choose a random square and make it more educated / learn as it goes on, make a reset button that can be pressed at all times, and if you were to choose to play again, go right into the game instead of choosing options again. 
